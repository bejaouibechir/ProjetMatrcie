 public class Classe
    {

        public void CancellableWork(CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                System.Console.WriteLine("Avorté dès  le début");
                cancellationToken.ThrowIfCancellationRequested();
            }

            for (int i = 0; i < 10000; i++)
            {
                Task.Delay(1000);
                if (cancellationToken.IsCancellationRequested)
                {
                    System.Console.WriteLine($"Avorté à l'interation # {i + 1}");
                    cancellationToken.ThrowIfCancellationRequested();
                }
                System.Console.WriteLine($"Iteration numero° {i + 1} faite");
            }
        }

        public Task CancellableTask(CancellationToken ct)
        {
            return Task.Factory.StartNew(() => CancellableWork(ct), ct);
        }
    }
    public class Program
    {  
        static public void Main()
        {
            CancellationTokenSource _source = new CancellationTokenSource();
            Classe classe = new Classe();
            Task task = Task.Factory.StartNew(() => classe.CancellableWork(_source.Token),
                _source.Token);
            System.Console.WriteLine("Appuller F1 pour stopper");
            ConsoleKeyInfo keyInfo = System.Console.ReadKey();
            if (keyInfo.Key == ConsoleKey.F1)
                _source.Cancel();
            try
            {
                task.Wait();
            }
            catch (AggregateException ae)
            {
                if (ae.InnerExceptions.Any(e => e is TaskCanceledException))
                    System.Console.WriteLine("Detection d'annulation de Task ");
              
            }

            System.Console.Read(); 
        }

       
    }
